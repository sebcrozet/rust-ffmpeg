#![crate_id = "avdevice55"]
#![license = "MIT"]
#![crate_type = "dylib"]
#![allow(non_camel_case_types)]
/* automatically generated by rust-bindgen */
extern crate libc;
extern crate avformat = "avformat55";
use libc::{c_void,c_uint,c_char,c_int,size_t};

pub type __int128_t = c_void;
pub type __uint128_t = c_void;
pub type __builtin_va_list = [__va_list_tag, ..1u];
pub struct Struct_AVDeviceRect {
    pub x: c_int,
    pub y: c_int,
    pub width: c_int,
    pub height: c_int,
}
pub type AVDeviceRect = Struct_AVDeviceRect;
pub type Enum_AVAppToDevMessageType = c_uint;
pub static AV_APP_TO_DEV_NONE: c_uint = 1313820229;
pub static AV_APP_TO_DEV_WINDOW_SIZE: c_uint = 1195724621;
pub static AV_APP_TO_DEV_WINDOW_REPAINT: c_uint = 1380274241;
pub type Enum_AVDevToAppMessageType = c_uint;
pub static AV_DEV_TO_APP_NONE: c_uint = 1313820229;
pub static AV_DEV_TO_APP_CREATE_WINDOW_BUFFER: c_uint = 1111708229;
pub static AV_DEV_TO_APP_PREPARE_WINDOW_BUFFER: c_uint = 1112560197;
pub static AV_DEV_TO_APP_DISPLAY_WINDOW_BUFFER: c_uint = 1111771475;
pub static AV_DEV_TO_APP_DESTROY_WINDOW_BUFFER: c_uint = 1111770451;
pub struct Struct_AVDeviceInfo {
    pub device_name: *mut c_char,
    pub device_description: *mut c_char,
}
pub type AVDeviceInfo = Struct_AVDeviceInfo;
pub struct Struct_AVDeviceInfoList {
    pub devices: *mut *mut AVDeviceInfo,
    pub nb_devices: c_int,
    pub default_device: c_int,
}
pub type AVDeviceInfoList = Struct_AVDeviceInfoList;
pub type __va_list_tag = Struct___va_list_tag;
pub struct Struct___va_list_tag {
    pub gp_offset: c_uint,
    pub fp_offset: c_uint,
    pub overflow_arg_area: *mut c_void,
    pub reg_save_area: *mut c_void,
}
#[link(name = "avdevice")]
extern "C" {
    pub fn avdevice_version() -> c_uint;
    pub fn avdevice_configuration() -> *c_char;
    pub fn avdevice_license() -> *c_char;
    pub fn avdevice_register_all();
    pub fn avdevice_app_to_dev_control_message(s: *mut avformat::Struct_AVFormatContext,
                                               _type:
                                                   Enum_AVAppToDevMessageType,
                                               data: *mut c_void,
                                               data_size: size_t) -> c_int;
    pub fn avdevice_dev_to_app_control_message(s: *mut avformat::Struct_AVFormatContext,
                                               _type:
                                                   Enum_AVDevToAppMessageType,
                                               data: *mut c_void,
                                               data_size: size_t) -> c_int;
    pub fn avdevice_list_devices(s: *mut avformat::Struct_AVFormatContext,
                                 device_list: *mut *mut AVDeviceInfoList) ->
     c_int;
    pub fn avdevice_free_list_devices(device_list:
                                          *mut *mut AVDeviceInfoList);
}

pub fn version() -> uint{
    unsafe {
        avdevice_version() as uint
    }
}
pub fn license() -> ~str {
    unsafe {
        std::str::raw::from_c_str(avdevice_license())
    }
}